%{
	#include <iostream>
	#include "definitions.h"
	#include "output.hpp"
	#include <stdio.h>
	using namespace output;
	 
	extern int yylineno;
	extern int yylex();
	int yyerror(const char *);

	int iWhileCounter = 0;
%}

%token VOID INT BYTE RETURN B SC COMMA ID STRING TRUE FALSE

%nonassoc RPAREN LBRACE RBRACE LBRACK RBRACK LPAREN

%nonassoc IF
%nonassoc ELSE
 
%token WHILE
%token BREAK
%token NUM
%token BOOL

%right ASSIGN

%left OR    
%left AND    

%left 	RELOP_2
%nonassoc RELOP_1

%left BINOP_2
%left BINOP_1

%right NOT




%%

Program		:	Funcs;
Funcs		:	FuncDecl	Funcs
			|	;

FuncDecl	:	RetType	ID	LPAREN	Formals	RPAREN	LBRACE	Statements	RBRACE;
RetType		:	Type
			| 	VOID;

Formals		:	FormalsList
			|	;

FormalsList	:	FormalDecl
			|	FormalDecl	COMMA	FormalsList;
				
FormalDecl	:	Type	ID
			|	Type	ID	LBRACK	NUM	RBRACK
			|	Type	ID	LBRACK	NUM		B	RBRACK;
				
Statements	:	Statement
			|	Statements	Statement

Statement	:	LBRACE	Statements	RBRACE
			|	Type	ID	SC
			|	Type	ID	ASSIGN	Exp	SC
			|	Type	ID	LBRACK	NUM	RBRACK	SC
			|	Type	ID	LBRACK	NUM	B 	RBRACK SC
			|	ID	ASSIGN	Exp	SC
			|	ID	LBRACK  Exp RBRACK ASSIGN Exp SC
			|	Call SC
			|	RETURN  SC
			|	RETURN  Exp SC
			| 	IF LPAREN Exp RPAREN Statement
			|   IF LPAREN Exp RPAREN Statement ELSE Statement
			|	WHILE startWhile LPAREN Exp RPAREN Statement endWhile
			|	BREAK SC {if ((iWhileCounter) <= 0) {errorUnexpectedBreak(yylineno); exit(1);}}
			;


startWhile	: {iWhileCounter++;};
endWhile	: {iWhileCounter--;};

				
Call 		:	ID LPAREN ExpList RPAREN
			|  ID LPAREN RPAREN;
				
ExpList 	:	Exp
			|	Exp COMMA ExpList;
			
Type		:	INT
			|	BYTE
			|	BOOL;
			
Exp 		:	LPAREN Exp RPAREN
			|	ID LBRACK Exp RBRACK
			|	ID
			|	Call
			|	NUM
			| 	NUM B
			| 	STRING
			|	TRUE
			|	FALSE
			|	Exp BINOP_1 Exp
			|	Exp BINOP_2 Exp
			|	Exp AND Exp
			|	Exp OR Exp
			| 	Exp RELOP_1 Exp
			| 	Exp RELOP_2 Exp
			|	NOT Exp;


%%

int main()
{		
	yyparse();
}

int yyerror(const char * message)
{
	cout<<"Parse error: "<<message<<endl;
	exit(0);
}