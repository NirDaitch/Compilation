%{

/* Declarations section */
#include <stdio.h>
#include <string.h>
void showToken(char *);

%}

%option yylineno
%option noyywrap


digit   		([0-9])
letter  		([a-zA-Z])
whitespace		([\t\n ])
endofline       (\x0D|\x0D\x0A|\x0A)
plusorminus 	([+-])
integer 		({plusorminus}?{digit}+)
hexaNum			(0x[0-9a-fA-F]+)
octalNum		(0o[0-7]+)

decimal1		({integer}\.?{digit}*)
decimal2		({plusorminus}?\.{digit}+)
decimal         ({decimal1}|{decimal2})
exp				(e{integer})


validEscape 	(\\\\|\\"|\\[abefnrtv0]|\\x[a-fA-F][a-fA-F])
string1 		('[^']*')
string2			("")    



%%


(---)		showToken("STARTSTRUCT");
(\.\.\.)		showToken("ENDSTRUCT");

(\[)			showToken("LLIST");
(\])			showToken("RLIST");

(\{)			showToken("LDICT");
(\})			showToken("RDICT");

(:)			showToken("KEY");
(\?)			showToken("COMPLEXKEY");

(-)			showToken("ITEM");

(,)			showToken("COMMA");

(!!{letter}+)			showToken("TYPE");


(#[^{endofline}]*{endofline})		{showToken("COMMENT");}

(true)			showToken("TRUE");
(false)			showToken("FALSE");



{integer}   			showToken("int");		
{hexaNum}				showToken("hex");
{octalNum}				showToken("oct");

({decimal}|{decimal}{exp}|\.inf|\.NaN)		showToken("REAL");

({string})			showToken("STRING");




{whitespace}                     ;
.		printf("Lex doesn't know what that is!\n");

%%

void showToken(char * name)
{
	char *tmp=name;
	if(strcmp(tmp,"int")==0 || strcmp(tmp,"hex")==0 || strcmp(tmp,"oct")==0) {
		name="INTEGER";
	}

	if(strcmp(name,"INTEGER")==0) {
		if(yytext[0]=='+') {
			yytext=yytext++;			
		}			
	}
	
	
	
	if(strcmp(tmp,"int")==0 ) {
		//removing leading zeros
		if(strlen(yytext)<=1) {

		}
		else {
			while(yytext[0]=='0' && yytext[1]!='\0') {
				yytext++;
			}
		}
	}







    /* printf("Lex found a %s, the lexeme is %s and its length is %d\n", name, yytext, yyleng); */
	printf("%d %s %s\n", yylineno, name, yytext);
	
}
