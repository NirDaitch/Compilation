%{

/* Declarations section */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void showToken(char *);
void showTokenInt(char *);

%}

%option yylineno
%option noyywrap
%Start Comment


digit   		([0-9])
letter  		([a-zA-Z])
whitespace		([\t\n ])

plusorminus 	([+-])
integer 		({plusorminus}?{digit}+)
hexaNum			(0x[0-9a-fA-F]+)
octalNum		(0o[0-7]+)

decimal1		({integer}\.?{digit}*)
decimal2		({plusorminus}?\.{digit}+)
decimal         ({decimal1}|{decimal2})
exp				(e{integer})


validEscape 	(\\\\|\\"|\\[abefnrtv0]|\\x[a-fA-F][a-fA-F])
string1 		('[^']*')
string2			("")    




%%


(---)		showToken("STARTSTRUCT");
(\.\.\.)		showToken("ENDSTRUCT");

(\[)			showToken("LLIST");
(\])			showToken("RLIST");

(\{)			showToken("LDICT");
(\})			showToken("RDICT");

(:)			showToken("KEY");
(\?)			showToken("COMPLEXKEY");

(-)			showToken("ITEM");

(,)			showToken("COMMA");

(!!{letter}+)			showToken("TYPE");


(\#[^\0\n\r(\r\n)]*[\0\n\r(\r\n)])    showToken("COMMENT");


(true)			showToken("TRUE");
(false)			showToken("FALSE");



{integer}   			showTokenInt("INTEGER");		
{hexaNum}				showTokenInt("INTEGER");
{octalNum}				showTokenInt("oct");

({decimal}|{decimal}{exp}|\.inf|\.NaN)		showToken("REAL");

({string1})			showToken("STRING");




{whitespace}                     ;
.		printf("Lex doesn't know what that is!\n");

%%

void showToken(char * name)
{
	if (strcmp(name,"COMMENT")==0)
	{
		printf("%d %s %s", yylineno, name, yytext);	
		return;
	}
    /* printf("Lex found a %s, the lexeme is %s and its length is %d\n", name, yytext, yyleng); */
	printf("%d %s %s\n", yylineno, name, yytext);	
}

void showTokenInt(char *name) {
	char *end;
	long ans=strtol(yytext,&end,0);
	char *tmp=name;
	if(strcmp(name,"oct")==0) {
		name="INTEGER";
		if(yyleng>1) {
			char str[yyleng+1];
			strcpy(str,yytext);
			str[1]='0';
			ans=strtol(&(str[1]),&end,0);
		}
	}
	printf("%d %s %ld\n",yylineno,name,ans);
	
	
}
