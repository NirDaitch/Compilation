%{

/* Declarations section */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void showToken(char *);
void showTokenInt(char *);
void showError();
void handleString1(char *);
void handleString2(char *);


%}

%option yylineno
%option noyywrap



digit   		([0-9])
letter  		([a-zA-Z])
whitespace		([\t\n ])

plusorminus 	([+-])
integer 		({plusorminus}?{digit}+)
hexaNum			(0x[0-9a-fA-F]+)
octalNum		(0o[0-7]+)

decimal1		({integer}\.?{digit}*)
decimal2		({plusorminus}?\.{digit}+)
decimal         ({decimal1}|{decimal2})
exp				(e{integer})


validEscape 	(\\\\|\\"|\\[abefnrtv0]|\\x[a-fA-F][a-fA-F])


validEscape2 	(\\\\|\\"|\\[abefnrtv0]|\\x[a-fA-F][a-fA-F])



%%


(---)		showToken("STARTSTRUCT");
(\.\.\.)		showToken("ENDSTRUCT");

(\[)			showToken("LLIST");
(\])			showToken("RLIST");

(\{)			showToken("LDICT");
(\})			showToken("RDICT");

(:)			showToken("KEY");
(\?)			showToken("COMPLEXKEY");

(-)			showToken("ITEM");

(,)			showToken("COMMA");

(!!{letter}+)			showToken("TYPE");


(\#[^\0\n\r(\r\n)]*[\0\n\r(\r\n)])    showToken("COMMENT");


(true)			showToken("TRUE");
(false)			showToken("FALSE");



{integer}   			showTokenInt("INTEGER");		
{hexaNum}				showTokenInt("INTEGER");
{octalNum}				showTokenInt("oct");

({decimal}|{decimal}e[+-]{integer}|\.inf|\.NaN)		showToken("REAL");




\'([\x20-\x26\x28-\x7E\x0D\x0A]|\x0D\x0A)*\'		                                  handleString1("STRING");

\"([\x20-\x21\x23-\x7E\x0D\x0A]|\x0D\x0A)*\"           					          handleString2("STRING");


{letter}({letter}|{digit})*                       showToken("VAL");

\&({letter})+                       showToken("DECLARATION");

\*({letter})+                       showToken("DEREFERENCE");

\'[^\']*					printf("Error unclosed string\n");exit(0);
\"[^\"]*					printf("Error unclosed string\n");exit(0);

<<EOF>>                     showToken("EOF");exit(0);

{whitespace}                ;

.		showError();exit(0);

%%

void showToken(char * name)
{
	
	if (strcmp(name,"COMMENT")==0)
	{
		printf("%d %s %s", yylineno, name, yytext);	
		return;
	} 
	
 
	printf("%d %s %s\n", yylineno, name, yytext);	
}

void showTokenInt(char *name) {
	char *end;
	long ans=strtol(yytext,&end,0);
	char *tmp=name;
	if(strcmp(name,"oct")==0) {
		name="INTEGER";
		if(yyleng>1) {
			char str[yyleng+1];
			strcpy(str,yytext);
			str[1]='0';
			ans=strtol(&(str[1]),&end,0);
		}
	}
	printf("%d %s %ld\n",yylineno,name,ans);
	
}

void handleString1(char *name) {
	char str[yyleng+1]; 
	//trimming starting and trailing apostrophe
	yytext++;
	strcpy(str,yytext);
	str[yyleng-2]='\0';
	printf("%d %s %s\n",yylineno,name,str);
}
void handleString2(char *name) {
	char str[yyleng+1]; 
	//trimming starting and trailing quotation
	yytext++;
	strcpy(str,yytext);
	str[yyleng-2]='\0';
	//here: if yytext= "abcd22" then str is abcd22

	//TODO:go over str and check if there is escape with invalid char, if yes print msg and exit
	//TODO: if not, replace all valid escapes with their value, as well as \xdd with its value






	printf("%d %s %s\n",yylineno,name,str);

}

void showError() {
	printf("Error %s\n", yytext);
}
